<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Sadblog</title>
        <description>Sadblog blog updates</description>
        <language>en-us</language>
        <link>https://sadblog.xyz/feed</link>
        <atom:link href="https://sadblog.xyz/feed" rel="self" type="application/rss+xml"/>
        
        <image>
            <title>Iwakura Lain</title>
            <url>https://sadblog.xyz/res/bear_lain.webp</url>
            <link>https://sadblog.xyz/feed</link>
        </image>

        <!-- Contents -->
<item>
<title>Compiling and flashing coreboot for T420 (corebooting part 2)</title>
<pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate>
<guid>https://sadblog/coreboot2.html</guid>
<description><![CDATA[<h1 id="compiling-and-flashing-coreboot-for-t420">Compiling and flashing coreboot for T420</h1>
<p>Recently I cleaned and hacked into the locked bios of a T420 that my friend had given to me for Corebooting. Article can be found <a href="https://sadblog.xyz/blog/coreboot1.html">here</a>. After having successfully unlocked the bios, it was time to proceed with Corebooting. The main steps can be broken down into following categories: updating the vendor bios, getting the original bios image from the flash chip, compiling the rom and flashing the rom. You will either need a Raspberry PI setup for writing the flashchip or one of the SPI programmers that are sold on eBay for like 10$. I used a CH341A programmer, which came with a nice SOIC-8 clip as well.</p>
<h2 id="updating-the-vendor-bios">Updating the vendor bios</h2>
<p>First step of performing any Corebooting is to update the vendor BIOS to the latest version possible. This ensures that the most up to date firmware is used, since after corebooting it becomes nearly impossible to update the firmware. For Thinkpad T420 you can find the latest BIOS update image from following <a href="https://pcsupport.lenovo.com/us/en/products/laptops-and-netbooks/thinkpad-t-series-laptops/thinkpad-t420/downloads/DS018784">site</a>. After downloading and verifying the integrity you can proceed to flashing the BIOS update image to the USB drive. First of all you will need to extract an El Torito image from the received ISO file. For that install <code>genisoimage</code>. After installation extract the image with following command:</p>
<pre><code>$ geteltorito 83uj33us.iso -o t420.img</code></pre>
<p>Now you can flash the image to USB drive using following command:</p>
<pre><code>$ sudo dd if=t420.img of=/dev/sdX bs=64K status=progress</code></pre>
<p>Reboot the computer and you should be able to boot into the BIOS update utility. Just follow on-screen instructions and you should be good to go. Additionally check the BIOS version to verify that the update really was successful.</p>
<h2 id="extracting-blobs-from-vendor-bios">Extracting BLOBs from vendor BIOS</h2>
<p>After successfully updating the bios, you should extract all necessary BLOBs, which are needed for the compilation. If you are lucky, you should be able to dump the bios image internally. To test if internal flashing is supported run the following command and cross your fingers:</p>
<pre><code>$ sudo /sbin/flashrom -p internal -r bios.bin</code></pre>
<p>If no errors are displayed, you can proceed to the next stage. If there were errors then that means that internal flashing is unsupported and thus external measures need to be taken -__-. Unfortunately in my case I could not read rom internally.</p>
<h3 id="reading-the-bios-image-externally">Reading the BIOS image externally</h3>
<p><strong>NOTE: I recommend to remove the CPU and memory from the motherboard to avoid accidental powering, when the programmer is connected.</strong></p>
<p>Disassemble your laptop and locate the flash chip. The flash chip should be located directly under the magnesium cover around the trackpad area. Once you have located the flash chip, you can connect it to the SPI programmer. Firstly I attempted to connect the flash chip with SOIC-8 clip but soon I realised that doing so was merely impossible to create a stable connection. After some frustration I decided to solder jumper wires to the motherboard instead (savage, I know). After doing so I was prompted with something like this:</p>
<figure>
<img src="/res/coreboot/SPI.png" alt="" /><figcaption>Looks legit</figcaption>
</figure>
<p>I tested the conductivity between chip pins and potential spots on motherboard to find out that there were special reserved holes on the PCB connected to the flash chip (potentially for flashing purposes?) where I could conveniently solder jumper wires to. After doing so I connected the jumpers with my programmer.</p>
<p><strong>PLEASE ALWAYS DOUBLE, TRIPLE, QUADRUPLE CHECK THAT ALL WIRES ARE CONNECTED TO THE PROGRAMMER CORRECTLY!!! THIS CAN POTENTIALLY SAVE YOUR MOTHERBOARD!!!</strong></p>
<p>After verifying that everything was correct, I connected the programmer with my laptop. I checked if the usb device is recognized properly and then proceeded to reading the BIOS image with following command:</p>
<pre><code>$ sudo /sbin/flashrom -p ch341a_spi -r bios.bin.1</code></pre>
<p>If no errors are thrown, you should repeat the reading process at least 2 times to check for potential checksum errors. Then check the SHA256 checksums with following command:</p>
<pre><code>$ sha256sum bios.bin.1 bios.bin.2 bios.bin.3</code></pre>
<p>If the hashes match you are good to go, if not then check your connections and try again. Delete the other two images and proceed with the next stage.</p>
<h2 id="extracting-firmware-blobs-from-the-bios-image">Extracting firmware BLOBs from the BIOS image</h2>
<p>For now you should have managed to successfully extract the vendor bios image from the flash chip. Clone the coreboot repository using following commands:</p>
<pre><code>$ git clone https://review.coreboot.org/coreboot
$ cd coreboot
$ git submodule update --init --checkout</code></pre>
<p>Navigate to <code>./util/ifdtool</code> and run <code>make</code> to compile it. Copy or create a symlink of the executable to <code>/usr/local/bin</code> for convenience and navigate to directory where BIOS image is stored. Extract the bios image into firmware blobs by using following command:</p>
<pre><code>$ ifdtool -x bios.bin</code></pre>
<p>From now on, you should be having 4 regions of the bios extracted. The files should be following: <code>flashregion_0_flashdescriptor.bin</code>, <code>flashregion_1_bios.bin</code>, <code>flashregion_2_intel_me.bin</code> and <code>flashregion_3_gbe.bin</code>. Delete <code>flashregion_1_bios.bin</code> since it is not needed and rename the rest of the files to something more memorable, for example:</p>
<pre><code>$ mv flashregion_0_flashdescriptor.bin descriptor.bin
$ mv flashregion_2_intel_me.bin me.bin
$ mv flashregion_3_gbe.bin gbe.bin</code></pre>
<h3 id="extracting-the-vbios">Extracting the vbios</h3>
<p>If you would like to use a custom bootsplash or use Tianocore as a payload, you will need to extract the vbios from original vendor bios image. For that step I recommend using <a href="https://github.com/LongSoft/UEFITool">UEFITool</a>, which is essentially a GUI tool for viewing and extracting multiple regions of your UEFI firmware images. Install and open your bios image with it. Search for the string “VGA Compatible BIOS” and uncheck <code>Unicode</code>. If the search was successful, you should find an appropriate RAW area. Click “Action -&gt; Section -&gt; Extract Body…” to extract it from the BIOS image and give it a familiar name to later find it.</p>
<h3 id="crippling-intel-me-spyware">Crippling Intel ME spyware</h3>
<figure>
<img src="/res/coreboot/Glow.png" alt="" /><figcaption>Average CIA agent, looking into your loli collection on your Stinkpad running btw I use Arch Linux via Intel ME backdoor</figcaption>
</figure>
<p>Unfortunately it is impossible to disable Intel ME completely, however it is possible to greatly restrict its capabilities using <a href="https://github.com/corna/me_cleaner">me_cleaner scripts</a>. Coreboot also gives you an option to reduce ME firmware size on compilation, however for flexibility I usually like to clean Intel ME manually using the me_cleaner. Once you have these scripts, you can sanitize most of the ME functionality using following command:</p>
<pre><code>python3 me_cleaner.py -S me.bin -O me_clean.bin</code></pre>
<p>Once you have successfully done that you can proceed to compilation stage.</p>
<h2 id="compiling-and-flashing-coreboot-rom">Compiling and flashing Coreboot rom</h2>
<p>Install following packages needed for compilation (Debian):</p>
<pre><code>apt install build-essential gnat flex bison libncurse5-dev wget zlib1g-dev iasl</code></pre>
<p>Once you have installed those prerequisites navigate to Coreboot root directory and run <code>make nconfig</code>. From here on you can customise the Coreboot to fill your needs. Make sure that the board is <code>Lenovo T420</code>, <code>Use CMOS for configuration values</code> is used and CBFS filesystem size should be set to 3MB (0x300000). Navigate to <code>Chipset</code> and verify that <code>Add Intel descriptor.bin file</code>, <code>Add Intel ME/TXE firmware</code> and <code>Add gigabit ethernet configuration</code> paths are set correctly to your extracted firmware blobs. For payload I used default <code>SeaBIOS</code>. Additionally if you want to use a custom bootsplash, add the correct vbios rom path to <code>Devices -&gt; Add a VGA BIOS image</code>. Bootsplash image path can be specified in <code>General setup -&gt; Add a bootsplash image</code>. Supported formats are bmp and jpg. If you want to use my bootsplash then link can be found <a href="/res/coreboot/Bootsplash.jpg">here</a>. Once you are done configuring your Coreboot build you can start by compiling the required toolchain with following command:</p>
<pre><code>$ make crossgcc CPUS=&lt;n&gt;</code></pre>
<p>This compilation takes a looong time (on my T420 it took about 2 - 3 hours), so grab yourself a cup of coffee and something to eat while it is compiling. After the toolchain is built you can compile the Coreboot rom using following command:</p>
<pre><code>$ make -j&lt;n&gt;</code></pre>
<p>This shouldn’t take long and once it is complete, you should find <code>coreboot.rom</code> file in <code>build/</code> directory. Now you can start flashing your freshly built Coreboot rom using following command:</p>
<pre><code>$ sudo /sbin/flashrom -p ch341a_spi -w coreboot.rom</code></pre>
<p>If no errors were present, you can reassemble the laptop and power it on. The result will be magnificent!</p>
<p><img src="/res/coreboot/WorkingBootsplash.png" /></p>
<h1 id="more-information-about-corebooting">More information about Corebooting</h1>
<ul>
<li><a href="https://www.coreboot.org/Board:lenovo/t420">Thinkpad T420 coreboot article</a></li>
<li><a href="https://www.coreboot.org/Build_HOWTO">Coreboot build howto</a></li>
</ul>]]></description>
</item>
<item>
<title>My searx instance has changed subdomains</title>
<pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate>
<guid>https://sadblog/searx-change.html</guid>
<description><![CDATA[<h1 id="my-searx-instance-has-changed-subdomains">My searx instance has changed subdomains</h1>
<p>So if you were using my searx instance and it suddenly stopped working, don’t smash your head into the wall like it’s the end of the world. I just changed the subdomains in server’s nginx config to be more straight forward. What used to be <code>https://sadblog.xyz/searx</code> is now <code>https://searx.sadblog.xyz</code>. Just change your search engine URL correspondingly and you are good to go.</p>]]></description>
</item>
<item>
<title>Cleaning and hacking Thinkpad T420 bios (corebooting part 1)</title>
<pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate>
<guid>https://sadblog/coreboot1.html</guid>
<description><![CDATA[<h1 id="cleaning-and-hacking-into-thinkpad-t420-bios">Cleaning and hacking into Thinkpad T420 bios</h1>
<p>My friend recently gave me a T420 for cleaning and since I personally also own a T420 as well I asked him, if he would like to get it corebooted. He agreed on that. Once I recieved the Thinkpad it was in a quite rough condition: scratches on the screen, awful anime stickers on the back, nasty keyboard, broken plastics etc.</p>
<figure>
<img src="/res/coreboot/T420Before.jpg" alt="" /><figcaption>Stickered laptop</figcaption>
</figure>
<p>Firstly I attempted to remove all the stickers that I could get and after rubbing the back of the screen with some isopropyl alcohol for about 10 minutes, I managed to clean off most of the sticker glue and other nastiness from it. The result of this cleaning looks like this:</p>
<figure>
<img src="/res/coreboot/T420After.jpg" alt="" /><figcaption>Cleaned laptop</figcaption>
</figure>
<p>After some outer cleaning I attempted to proceed with the usual corebooting process. The first step of corebooting any machine is to update the vendor bios to the latest version, since the original bios image is required for extracting firmware blobs. After trying to access the bios, I was prompted with the following screen:</p>
<figure>
<img src="/res/coreboot/BiosPass.jpg" alt="" /><figcaption>Locked T420</figcaption>
</figure>
<p>It seems that the bios was locked after all, so I asked my friend to provide me the password, but he had forgotten it. After hearing that I decided to hack into bios instead. I did some research and found that it is actually possible to bypass the password by shorting two pins on the bios security EEPROM chip. In my case it was the PCO8A chip on the motherboard. The bios security EEPROM should be located on the side of the motherboard where CPU socket is not located. Once the security chip is located you should identify SCL and SDA pins. Usually they should be pins 5 and six 6 (circled on the picture below)</p>
<figure>
<img src="/res/coreboot/SecurityChip.jpg" alt="" /><figcaption>Bios security EEPROM</figcaption>
</figure>
<p>Now you should reassemble the display, power connector, keyboard, CMOS, memory, cpu and heatsink back together because now comes the fun part of actually hacking into bios. Finally connect the power connector to the charger and you should have similar setup:</p>
<figure>
<img src="/res/coreboot/GhettoSetup.jpg" alt="" /><figcaption>Ghetto setup</figcaption>
</figure>
<p>Take some small conductive object, such as a flat-head screwdriver and follow the following instructions (assuming that UEFI bios is used):</p>
<ul>
<li>Turn on the computer</li>
<li>Once the screen turns on immideately short the SCL and SDA pins together</li>
<li>Press F1 repeatedly</li>
<li>If the password prompt comes up, try these steps again</li>
<li>If you get into bios successfully, you can navigate to Security -&gt; Supervisor password and disable or add new bios password</li>
</ul>
<p>Now you should have successfully breached bios security measures and gained access to bios settings once again.</p>
<figure>
<img src="/res/coreboot/BiosAccess.jpg" alt="" /><figcaption>Bios access gained</figcaption>
</figure>
<p><strong>NOTE: I do not take any responsibility for any possible damages caused for your laptop. Use this tutorial at your own risk!</strong></p>]]></description>
</item>
<item>
<title>Equipment and software I use</title>
<pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate>
<guid>https://sadblog/equipment.html</guid>
<description><![CDATA[<h1 id="equipment-and-software-i-use">Equipment and software I use</h1>
<h2 id="hardware">Hardware</h2>
<p>I built a desktop computer back in 2017. So far I have managed to upgrade it quite a bit and since I got sick from all the consoomerism, I do not plan to upgrade my computer anytime soon.<br />
The specs are following:</p>
<p><strong>Processor</strong><br />
I use AMD Ryzen 1600. I would say it is quite good CPU for my purposes. I might even consider this CPU as AMD’s version of i5 2500k, in terms of its longetivity and useability. That being said this CPU is still using x86 architecture, which is heavily compromised by glowniggers, by having essentially a built in <a href="https://www.tomshardware.com/news/design-flaws-backdoors-amd-ryzen,36657.html">backdoor</a>, which not only could be used by glowniggers, but also by random black-hat hackers, whenever a new exploit is found.</p>
<p><strong>Graphics card</strong><br />
My desktop has not one, but two graphics cards. One is Nvidia GTX 1070TI and the other one is AMD Rx 480. The reason for two completely different graphics cards is actually quite simple. Since I sometimes setup virtual machines for different purposes, I’d like to have near native graphics performance in my guest operating systems. For this purpose I do PCI passthrough and in order to do PCI passthrough I must isolate secondary graphics card from the host machine completely. The secondary graphics card in my case is AMD Rx 480.<br />
For more information about isolating graphics card and setting up PCI passthrough for the vm, check out this Arch wiki <a href="https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF">article</a></p>
<p><strong>Memory</strong><br />
I have a good amount of 32GB of memory (mainly because of my virtual machine autism).</p>
<p><strong>Storage devices</strong><br />
For root file system I use a 500GB ssd, which I also use to store EFI and swap partitions. I also have one 1TB hard drive, which has 90% of its storage capacity used. To combat this issue I also have two 2TB hard drives in raid. This provides me some additional storage space that is much needed in my case.</p>
<h2 id="software">Software</h2>
<p>When it comes to software I try to mostly avoid proprietary crap (or isolate it in virtual machine and use it that way if really needed). The only bad exception, when I really need to use proprietary software is when I need to install Nvidia drivers, because Nvidia is a cunt and hates free software.</p>
<p><img src="/res/linus_nvidia.webp" style="width: 300px; margin: auto;" alt="Linus from Linux Tech Tips showing his dissatisfaction with Nvidia" /><br />
<strong>This man clearly has some critisism towards Nvidia</strong></p>
<h3 id="basic-software">Basic software</h3>
<p><strong>Operating system</strong><br />
I use Void Linux, which is completely independent Linux distribution. Polfag memes aside it is actually quite good distribution for following reasons: no systemd, very minimal installation, up to date packages and decent selection of packages in package manager. I have also used other distributions in the past such as Debian, Arch, Gentoo and even Ubuntu at some point. As much as I can tell, there is not much difference between distros, other than the package management system, init system and the amount of bloat that comes preinstalled with clean installation.</p>
<p><strong>Window manager</strong><br />
I use my own configuration of suckless’s dwm alongside with my own configuration of dmenu. In addition I always set the GTK theme as Chicago95 for better visual compatibility with the status bar and GTK ui. I haven’t really found any good QT themes that would look uniform with Chicago95, but I don’t really care either since I don’t really use programs that use QT anyway.<br />
My dwm configuration can be found <a href="https://github.com/inugami-dev64/dwm">here</a> and dmenu configuration can be found <a href="https://github.com/inugami-dev64/dmenu">here</a></p>
<p><strong>Terminal emulator</strong><br />
As for the terminal emulator I use suckless’s st. It does all that it needs to do, it is lightweight and it is quite customisable. My custom st build can be found at following <a href="https://github.com/inugami-dev64/st">link</a>.</p>
<p><strong>Web browser</strong><br />
I use Firefox ESR with hardened configuration, since I despise Chromium based browsers. That being said Firefox is still quite shit browser out of the box for the following reasons: the amount of telemetry it sends back home, useless features such as pocket, Goolag as its default search engine, gimped down user interface, no adblocking by default, and the leftist agenda that Mozilla is propagating. However once the tweaking part is done it is quite a good browser. If the tweaking is too much I can recommend more sane fork of Firefox called <a href="https://librewolf-community.gitlab.io/">Librewolf</a>. It has all the same functionality as regular Firefox, but without telemetry, with more private search engine providers by default and with uBlock origin preinstalled.</p>
<h3 id="utilities">Utilities</h3>
<p><strong>Text editor</strong><br />
I use Neovim for text editing, which is essentially just a community driven fork of Vim, which onto itself is a fork of old unix based text editor called Vi. Vim is a completely different world onto itself and its keybindings are really nice to use, once you master the Vim wizardry. My init.vim (vimrc for Neovim) can be found <a href="https://gist.githubusercontent.com/inugami-dev64/2be6af9deddbcb1d0f0febb2e2eaf274/raw/d9981e9aaa39ba77c801f5197d1aeab4d74e2221/.vimrc">here</a></p>
<p><strong>File manager</strong> For the file manager I use vifm and / or just terminal. Vifm is a great terminal file manager, which can be extended to even show image previews using Überzug! That being said the only reason for me to ever use file manager is when I need to find a specific image from my badly organised image directory with timestamps as image file names.</p>
<p><strong>3D Modelling</strong> I use Blender for 3D modelling. However I am still quite novice at using it.</p>
<h3 id="multimedia">Multimedia</h3>
<p><strong>Media player</strong><br />
I use mpv for listening to music and consooming videos locally or from the internet using youtube-dl. Mpv is literally the best media player out there. It is quite lightweight (compared to vlc for example), it is extensible with userscripts, it has decent selection of commandline options and most importantly it is very keyboard friendly media player.</p>
<p><strong>Image viewer</strong><br />
I use feh for image viewing. It supports most of the image formats (except animated gifs), is quite small and can be used to set wallpapers for X11.</p>
<p><strong>Image manipulation (read: meme manipulation program)</strong><br />
GIMP, it is decent enough.</p>
<h3 id="productivity-and-communication">Productivity and communication</h3>
<p><strong>Mail client</strong><br />
I use Thunderbird, since I am lazy and it just werks®. It’s not great email client, since it is quite bloated by using Mozilla’s gecko engine, but it is good enough for my purposes. If you’d like a CLI mail client use something like mutt instead.</p>
<p><strong>PDF viewer</strong><br />
For PDF viewer I use mupdf. It does what it is supposed to do, show the PDF file. That being said mupdf does not have many fancy features including printing capability, but that can be done using lpr anyways.</p>
<p><strong>Torrent client</strong><br />
For torrenting stuff, I use transmission-cli. It is probably the most basic bitch choice (along with qbittorrent), but it works and is not too bloated.</p>
<p><strong>Typesetting</strong><br />
For typesetting I use LaTex because all cool kids use it, so I must as well. I like Latex, since it allows to create fancy mathematical equations, automatic paragraph numbering, automatic ToC generation and decent bibliography management. Also Latex allows to create a correctly formated documents with ease. Which means that I can just focus on writing the document and not having to worry about formating (assuming that I have necessary template created).</p>
<p><strong>Presentations</strong><br />
Whenever I need to create a presentation I just write a Markdown file, then use pandoc to convert the markdown file into Latex using Beamer class and finally compile the Latex file into PDF. It is really easy to do and much better than having to use something like Libreoffice or even worse Google slides.</p>
<p><strong>Spreadsheets</strong><br />
For spreadsheets, I use Libreoffice calc, because I have Libreoffice installed anyways for opening word documents, when needed.</p>]]></description>
</item>
<item>
<title>Hello Website</title>
<pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
<guid>https://sadblog/hello.html</guid>
<description><![CDATA[<h1 id="hello-website">Hello website</h1>
<p>The website is still under construction (mainly the static content generation) but overall all it should be visually and functionally good enough for sharing posts written in markdown. I will also attempt to add rss-bridge support and Monero donation addresses for the website soon.</p>]]></description>
</item>

    </channel>
</rss>
